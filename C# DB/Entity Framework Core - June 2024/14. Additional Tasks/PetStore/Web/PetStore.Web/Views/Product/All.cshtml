@using PetStore.Common
@model PetStore.Web.ViewModels.Product.AllProductsViewModel

@{
    ViewData["Title"] = "All Products";
}

<div class="row">
    <div class="col-md-4">
        <h1>All Products</h1>

        @if (User.IsInRole(GlobalConstants.AdministratorRoleName))
        {
            <p>
                <a class="btn btn-info" asp-action="Create">Create New</a>
            </p>
        }

        @foreach (string category in Model.Categories)
        {
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="@category" name="categoryCheckbox" value="@category">
                <label class="form-check-label" for="@category">@category</label>
            </div>
        }
    </div>
    <div class="col-md-6 justify-content-end">
        <form method="get" asp-controller="Product" asp-action="All" class="mt-5">
            <div class="input-group">
                @if (Model.SearchQuery == null)
                {
                    <input type="text" id="search" name="search" class="form-control" placeholder="Search...">
                }
                else
                {
                    <input type="text" id="search" name="search" class="form-control" value="@Model.SearchQuery">
                }
                <div class="input-group-btn">
                    <button class="btn btn-success m-auto" type="submit">
                        Search
                    </button>
                </div>
            </div>
        </form> 
    </div>
</div>

<table class="table">
    <thead>
    <tr>
        <th>
            Name
        </th>
        <th>
            Price
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var product in Model.AllProducts) 
    {
        <tr name="trData">
            <td>
                @Html.DisplayFor(modelItem => product.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => product.Price)
            </td>
            <td>
                <a class="btn btn-info" asp-action="Details" asp-route-id="@product.Id">Details</a> 
                @if (User.IsInRole(GlobalConstants.AdministratorRoleName))
                {
                    <a class="btn btn-dark" asp-action="Edit" asp-route-id="@product.Id">Edit</a>
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@product.Id">Delete</a>
                }
            </td>
            <td hidden>
                @product.CategoryName
            </td>
        </tr>
    }
    </tbody>
</table>

<script>
    (function () {
        let checkBoxes = document.getElementsByName("categoryCheckbox");

        // Store the initial visibility state of all rows
        let tableRows = document.getElementsByName("trData");
        let initialRowState = Array.from(tableRows).map(row => ({
            element: row,
            display: row.style.display || "table-row"
        }));

        // Add event listeners to checkboxes
        for (let box of checkBoxes) {
            box.addEventListener('click', (e) => {
                let selectedCategories = Array.from(checkBoxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);

                // Show or hide rows based on the selected categories
                for (let rowState of initialRowState) {
                    let categoryCell = rowState.element.children[rowState.element.children.length - 1];
                    let categoryOfRow = categoryCell.textContent.trim();

                    if (selectedCategories.length === 0 || selectedCategories.includes(categoryOfRow)) {
                        rowState.element.style.display = rowState.display;
                    } else {
                        rowState.element.style.display = "none";
                    }
                }
            });
        }
    })();
</script>